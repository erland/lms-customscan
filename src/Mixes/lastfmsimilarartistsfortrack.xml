<?xml version="1.0" encoding="utf-8"?>
<custombrowse>
	<requireplugins>CustomScan</requireplugins>
	<minpluginversion>2.9</minpluginversion>
	<mix>
		<mixname>LastFM Similar Artists</mixname>
		<mixcategory>track</mixcategory>
		<mixchecktype>sql</mixchecktype>
		<mixcheckdata>
			select contributor,name from customscan_contributor_attributes
			where
				module='cslastfm' and
				attr='similarartist'
			limit 1
		</mixcheckdata>
		<mixtype>menu</mixtype>
		<mixdata>
			<menuname>LastFM Similar Artists</menuname>
			<keyword name="basetrack" value="{itemid}"/>
			<keyword name="basetracktitle" value="{itemname}"/>
			<menu>
				<menuname>Similar to {basetracktitle}</menuname>

				<playtype>sql</playtype>
				<playdata>
					(select distinct tracks.id,tracks.title from tracks
					join contributor_track on contributor_track.track=tracks.id and contributor_track.role in (1,5)
					join contributors on contributors.id=contributor_track.contributor
					left join customscan_contributor_attributes as attr1 on
						attr1.contributor=contributors.id and
						attr1.module='cslastfm' and
						attr1.attr='similarartist'
					where
						audio=1 and
						(attr1.id is not null and exists(select id from contributors,contributor_track
											where attr1.value=contributors.name and
											contributors.id=contributor_track.contributor and
											contributor_track.role in (1,5) and
											contributor_track.track={basetrack}))
					)
					union
					(select distinct tracks.id,tracks.title from tracks
					join contributor_track on contributor_track.track=tracks.id and contributor_track.role in (1,5)
					join contributors on contributors.id=contributor_track.contributor
					left join customscan_contributor_attributes as attr2 on
						attr2.value=contributors.name and
						attr2.module='cslastfm' and
						attr2.attr='similarartist'
					where
						audio=1 and
						(attr2.id is not null and exists(select contributor from contributor_track
											where contributor_track.role in (1,5) and
											contributor_track.track={basetrack} and
											contributor_track.contributor=attr2.contributor))
					)
					union
					(select distinct tracks.id,tracks.title from tracks
					join contributor_track on contributor_track.track=tracks.id and contributor_track.role in (1,5) 
					join contributor_track ct2 on contributor_track.contributor=ct2.contributor and ct2.role in (1,5) and ct2.track={basetrack}
					where
						audio=1
					)
					order by {RANDOMFUNCTION}
					limit {custombrowse.mixsize}
				</playdata>
				<menu>
					<id>artist</id>
					<menuname>Albums</menuname>
					<itemtype>artist</itemtype>
				        <menutype>sql</menutype>
					<menulinks>alpha</menulinks>
					<menuheader>Similar to {basetracktitle}</menuheader>
			        	<menudata>
						(select distinct contributors.id,contributors.name,substr(contributors.namesort,1,1),contributors.namesort from contributors
						left join customscan_contributor_attributes as attr1 on 
							attr1.module='cslastfm' and
							attr1.attr='similarartist' and
							attr1.value=contributors.name
						join contributor_track on
							contributor_track.contributor=attr1.contributor and
							contributor_track.role in (1,5) and
							contributor_track.track={basetrack}
						where 
							attr1.id is not null
						) union
						(select distinct contributors.id,contributors.name,substr(contributors.namesort,1,1),contributors.namesort from contributors
						left join customscan_contributor_attributes as attr2 on
							attr2.module='cslastfm' and
							attr2.attr='similarartist' and
							attr2.contributor=contributors.id
						where 
							attr2.id is not null and
								exists (select id from contributors,contributor_track where
									contributor_track.contributor=contributors.id and
									contributor_track.role in (1,5) and
									contributor_track.track={basetrack} and
									contributors.name=attr2.value)
						) order by namesort asc
					</menudata>
					<menu>
						<id>album</id>
						<menuname>Songs</menuname>
						<itemtype>album</itemtype>
						<itemformat>album</itemformat>
						<menutype>sql</menutype>
						<option>
		                                        <id>byyear</id>
		                                        <name>Sort by year</name>
		                                        <keyword name="orderby" value="albums.year desc,albums.titlesort asc"/>
		                                        <menulinks>number</menulinks>
		                                </option>
		                                <option>
		                                        <id>bytitle</id>
		                                        <name>Sort by title</name>
		                                        <menulinks>alpha</menulinks>
		                                        <keyword name="orderby" value="albums.titlesort asc"/>
		                                </option>
						<menudata>
							select albums.id,albums.title,substr(albums.titlesort,1,1) from contributor_album,albums 
							where 
								albums.id=contributor_album.album and 
								contributor_album.contributor={artist} 
							group by albums.id 
							order by {orderby}
						</menudata>
						<menu>
							<id>track</id>
							<itemtype>track</itemtype>
							<itemformat>track</itemformat>
							<menutype>sql</menutype>
							<menudata>
								select tracks.id,tracks.title from tracks,contributor_track,albums 
								where 
									tracks.audio=1 and 
									contributor_track.track=tracks.id and 
									tracks.album={album} and 
									contributor_track.contributor={artist} 
								group by tracks.id 
								order by tracks.tracknum asc,tracks.titlesort asc
							</menudata>
							<menu>
								<id>trackdetails</id>
								<menutype>trackdetails</menutype>
								<menudata>track</menudata>
							</menu>
						</menu>
					</menu>
				</menu>
			</menu>
		</mixdata>
	</mix>
</custombrowse>
