<?xml version="1.0" encoding="utf-8"?>
<databasequery>
	<dataquery>
		<name>[% queryname %]</name>
		<querytree>
			<queryid>notrefreshedsongs</queryid>
			<query>
				select 'Not refreshed entries in Custom Scan song data' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt as 'Number of' from 
					(select count(*) as cnt from customscan_track_attributes,tracks where (tracks.url=customscan_track_attributes.url) or (customscan_track_attributes.musicbrainz_id is not null and tracks.musicbrainz_id=customscan_track_attributes.musicbrainz_id)) t1,
					(select count(*) as cnt from customscan_track_attributes,tracks where tracks.id=customscan_track_attributes.track and tracks.url=customscan_track_attributes.url and tracks.audio=1) t2 
			</query>
			<querytree>
				<queryid>trackdata</queryid>
				<query>
					select distinct customscan_track_attributes.track,customscan_track_attributes.musicbrainz_id,customscan_track_attributes.module,customscan_track_attributes.attr,customscan_track_attributes.value,customscan_track_attributes.url from customscan_track_attributes
					left join tracks on
						tracks.id=customscan_track_attributes.track and
						tracks.url=customscan_track_attributes.url
					where
						tracks.id is null
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>notrefreshedartists</queryid>
			<query>
				select 'Not refreshed entries in Custom Scan artist data' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt as 'Number of' from 
					(select count(*) as cnt from customscan_contributor_attributes,contributors where contributors.name=customscan_contributor_attributes.name or (customscan_contributor_attributes.musicbrainz_id is not null and contributors.musicbrainz_id=customscan_contributor_attributes.musicbrainz_id)) t1,
					(select count(*) as cnt from customscan_contributor_attributes,contributors where contributors.id=customscan_contributor_attributes.contributor and contributors.name=customscan_contributor_attributes.name) t2 
			</query>
			<querytree>
				<queryid>artistdata</queryid>
				<query>
					select distinct customscan_contributor_attributes.contributor,customscan_contributor_attributes.name,customscan_contributor_attributes.musicbrainz_id,customscan_contributor_attributes.module,customscan_contributor_attributes.attr,customscan_contributor_attributes.value from customscan_contributor_attributes
					left join contributors on
						contributors.id=customscan_contributor_attributes.contributor and
						contributors.name=customscan_contributor_attributes.name
					where
						contributors.id is null
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>notrefreshedalbums</queryid>
			<query>
				select 'Not refreshed entries in Custom Scan album data' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt as 'Number of' from 
					(select count(*) as cnt from customscan_album_attributes,albums where albums.title=customscan_album_attributes.title or (customscan_album_attributes.musicbrainz_id is not null and albums.musicbrainz_id=customscan_album_attributes.musicbrainz_id)) t1,
					(select count(*) as cnt from customscan_album_attributes,albums where albums.id=customscan_album_attributes.album and albums.title=customscan_album_attributes.title) t2
			</query>
			<querytree>
				<queryid>albumdata</queryid>
				<query>
					select distinct customscan_album_attributes.album,customscan_album_attributes.title,customscan_album_attributes.musicbrainz_id,customscan_album_attributes.module,customscan_album_attributes.attr,customscan_album_attributes.value from customscan_album_attributes
					left join albums on
						albums.id=customscan_album_attributes.album and
						albums.title=customscan_album_attributes.title
					where
						albums.id is null
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>unusedsongs</queryid>
			<query>
				select 'Unused entries in Custom Scan song data' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt as 'Number of' from 
					(select count(*) as cnt from customscan_track_attributes) t1,
					(select count(*) as cnt from customscan_track_attributes,tracks where tracks.id=customscan_track_attributes.track and tracks.audio=1) t2
			</query>
			<querytree>
				<queryid>trackdata</queryid>
				<query>
					select distinct customscan_track_attributes.track,customscan_track_attributes.module,customscan_track_attributes.attr,customscan_track_attributes.value,customscan_track_attributes.url from customscan_track_attributes
					left join tracks on
						tracks.id=customscan_track_attributes.track
					where
						tracks.id is null
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>unusedartists</queryid>
			<query>
				select 'Unused entries in Custom Scan artist data' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt as 'Number of' from
					(select count(*) as cnt from customscan_contributor_attributes) t1,
					(select count(*) as cnt from customscan_contributor_attributes,contributors where contributors.id=customscan_contributor_attributes.contributor) t2
			</query>
			<querytree>
				<queryid>artistdata</queryid>
				<query>
					select distinct customscan_contributor_attributes.contributor,customscan_contributor_attributes.name,customscan_contributor_attributes.module,customscan_contributor_attributes.attr,customscan_contributor_attributes.value from customscan_contributor_attributes
					left join contributors on
						contributors.id=customscan_contributor_attributes.contributor
					where
						contributors.id is null
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>unusedalbums</queryid>
			<query>
				select 'Unused entries in Custom Scan album data' as 'Problem type',if(t1.cnt-t2.cnt>0,'Yes','No') as 'Possible problem', t1.cnt-t2.cnt as 'Number of' from 
					(select count(*) as cnt from customscan_album_attributes) t1,
					(select count(*) as cnt from customscan_album_attributes,albums where albums.id=customscan_album_attributes.album) t2
			</query>
			<querytree>
				<queryid>albumdata</queryid>
				<query>
					select distinct customscan_album_attributes.album,customscan_album_attributes.title,customscan_album_attributes.module,customscan_album_attributes.attr,customscan_album_attributes.value from customscan_album_attributes
					left join albums on
						albums.id=customscan_album_attributes.album
					where
						albums.id is null
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicatesongs</queryid>
			<query>
				select distinct 'Duplicate entries in Custom Scan song data' as 'Problem type',if(sum(result.cnt)>0,'Yes','No') as 'Possible problem', ifnull(sum(cnt),0) as 'Number of' from 
					(select count(*) as cnt from customscan_track_attributes 
						group by track,module,attr,value
						having count(*)>1) result
			</query>
			<querytree>
				<queryid>trackdata</queryid>
				<query>
					select customscan_track_attributes.track,customscan_track_attributes.module,customscan_track_attributes.attr,customscan_track_attributes.value,tracks.tracknum,tracks.title,customscan_track_attributes.url from customscan_track_attributes
					join 
						(select track,module,attr,value from customscan_track_attributes 
							group by track,module,attr,value
							having count(*)>1) duplicates on
						customscan_track_attributes.track=duplicates.track and
						customscan_track_attributes.module=duplicates.module and
						customscan_track_attributes.attr=duplicates.attr and
						customscan_track_attributes.value=duplicates.value
					left join tracks on
						tracks.id=customscan_track_attributes.track
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicateartists</queryid>
			<query>
				select distinct 'Duplicate entries in Custom Scan artist data' as 'Problem type',if(sum(result.cnt)>0,'Yes','No') as 'Possible problem', ifnull(sum(cnt),0) as 'Number of' from 
					(select count(*) as cnt from customscan_contributor_attributes 
						group by contributor,module,attr,value
						having count(*)>1) result
			</query>
			<querytree>
				<queryid>artistdata</queryid>
				<query>
					select customscan_contributor_attributes.contributor,customscan_contributor_attributes.name,customscan_contributor_attributes.module,customscan_contributor_attributes.attr,customscan_contributor_attributes.value from customscan_contributor_attributes,
						(select contributor,module,attr,value from customscan_contributor_attributes 
							group by contributor,module,attr,value
							having count(*)>1) duplicates
					where
						customscan_contributor_attributes.contributor=duplicates.contributor and
						customscan_contributor_attributes.module=duplicates.module and
						customscan_contributor_attributes.attr=duplicates.attr and
						customscan_contributor_attributes.value=duplicates.value
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicatealbums</queryid>
			<query>
				select distinct 'Duplicate entries in Custom Scan album data' as 'Problem type',if(sum(result.cnt)>0,'Yes','No') as 'Possible problem', ifnull(sum(cnt),0) as 'Number of' from 
					(select count(*) as cnt from customscan_album_attributes 
						group by album,module,attr,value
						having count(*)>1) result
			</query>
			<querytree>
				<queryid>albumdata</queryid>
				<query>
					select customscan_album_attributes.album,customscan_album_attributes.title,customscan_album_attributes.module,customscan_album_attributes.attr,customscan_album_attributes.value from customscan_album_attributes,
						(select album,module,attr,value from customscan_album_attributes 
							group by album,module,attr,value
							having count(*)>1) duplicates
					where
						customscan_album_attributes.album=duplicates.album and
						customscan_album_attributes.module=duplicates.module and
						customscan_album_attributes.attr=duplicates.attr and
						customscan_album_attributes.value=duplicates.value
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>reallylongurls</queryid>
			<query>
				select 'Songs with really long urls (Longer than 511 characters)' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from tracks 
					where audio=1 and length(url)&gt;511
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select tracks.id,tracks.tracknum,tracks.title,tracks.url from tracks
					where
						audio=1 and length(url)&gt;511
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>longurls</queryid>
			<query>
				select 'Songs with long urls (Longer than 255 and shorter than 511 characters)' as 'Problem type',if(count(*)>0,'Yes','No') as 'Possible problem', count(*) as 'Number of' from tracks 
					where audio=1 and length(url)&gt;255 and length(url)&lt;512
			</query>
			<querytree>
				<queryid>track</queryid>
				<query>
					select tracks.id,tracks.tracknum,tracks.title,tracks.url from tracks
					where
						audio=1 and length(url)&gt;255 and length(url)&lt;512
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicateartistssamename</queryid>
			<query>
				select 'Duplicate artists with same name without musicbrainz tags' as 'Problem type',if(sum(result.cnt)>0,'Yes','No') as 'Possible problem', ifnull(sum(cnt),0) as 'Number of' from
					(select count(*) as cnt from contributors 
						where musicbrainz_id is null
						group by contributors.name
						having count(*)>1) result
			</query>
			<querytree>
				<queryid>artist</queryid>
				<query>
					select contributors.id,contributors.name from contributors,
						(select contributors.name from contributors 
							where musicbrainz_id is null
							group by contributors.name
							having count(*)>1) duplicates
					where
						contributors.name=duplicates.name and
						contributors.musicbrainz_id is null
				</query>
			</querytree>
		</querytree>
		<querytree>
			<queryid>duplicatealbumssamename</queryid>
			<query>
				select 'Duplicate albums with same title without musicbrainz tags' as 'Problem type',if(sum(result.cnt)>0,'Yes','No') as 'Possible problem', ifnull(sum(cnt),0) as 'Number of' from
					(select count(*) as cnt from albums 
						where musicbrainz_id is null
						group by albums.title
						having count(*)>1) result
			</query>
			<querytree>
				<queryid>album</queryid>
				<query>
					select albums.id,albums.title from albums,
						(select albums.title from albums 
							where musicbrainz_id is null
							group by albums.title
							having count(*)>1) duplicates
					where
						albums.title=duplicates.title and
						albums.musicbrainz_id is null
				</query>
			</querytree>
		</querytree>
	</dataquery>
</databasequery>

